// <auto-generated />
using System;
using EDeskOutSourcing.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EDeskOutSourcing.Migrations
{
    [DbContext(typeof(CompanyContext))]
    partial class CompanyContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("EDeskOutSourcing.Models.Admin", b =>
                {
                    b.Property<long>("AdminID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("AdminID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("AdminID");

                    b.ToTable("AdminTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.City", b =>
                {
                    b.Property<long>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CityID"), 1L, 1);

                    b.Property<string>("CityName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("StateID")
                        .HasColumnType("bigint");

                    b.HasKey("CityID");

                    b.HasIndex("StateID");

                    b.ToTable("CityTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Company", b =>
                {
                    b.Property<long>("CompanyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyID"), 1L, 1);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPersonName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("JoinedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("MobileNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyID");

                    b.HasIndex("CityID");

                    b.ToTable("CompanyTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.CompanyFAQ", b =>
                {
                    b.Property<long>("CompanyFAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CompanyFAQID"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FAQ")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CompanyFAQID");

                    b.ToTable("CompanyFAQTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Country", b =>
                {
                    b.Property<long>("CountryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("CountryID"), 1L, 1);

                    b.Property<string>("CountryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CountryID");

                    b.ToTable("CountryTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Education", b =>
                {
                    b.Property<long>("EducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("EducationID"), 1L, 1);

                    b.Property<string>("EducationName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EducationType")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("EducationID");

                    b.ToTable("EducationTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FinishedProject", b =>
                {
                    b.Property<long>("FinishedProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FinishedProjectID"), 1L, 1);

                    b.Property<DateTime>("FinishedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FinishedRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.HasKey("FinishedProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("FinishedProjectTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Freelancer", b =>
                {
                    b.Property<long>("FreelancerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerID"), 1L, 1);

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmailID")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MobileNo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerID");

                    b.ToTable("FreelancerTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerCertifications", b =>
                {
                    b.Property<long>("FreelancerCertificationsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerCertificationsID"), 1L, 1);

                    b.Property<string>("CertificateTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FreelancerID")
                        .HasColumnType("bigint");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityInstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerCertificationsID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("FreelancerCertificationsTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerEducation", b =>
                {
                    b.Property<long>("FreelancerEducationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerEducationID"), 1L, 1);

                    b.Property<long>("EducationID")
                        .HasColumnType("bigint");

                    b.Property<long>("FreelancerID")
                        .HasColumnType("bigint");

                    b.Property<string>("PassingYear")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UniversityInstituteName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerEducationID");

                    b.HasIndex("EducationID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("FreelancerEducationTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerExperience", b =>
                {
                    b.Property<long>("FreelancerExperienceID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerExperienceID"), 1L, 1);

                    b.Property<int>("ExperienceInMonths")
                        .HasColumnType("int");

                    b.Property<long>("FreelancerID")
                        .HasColumnType("bigint");

                    b.Property<string>("RoleName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerExperienceID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("FreelancerExperienceTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerFAQ", b =>
                {
                    b.Property<long>("FreelancerFAQID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerFAQID"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Answer")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FAQ")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerFAQID");

                    b.ToTable("FreelancerFAQTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerPreviousProject", b =>
                {
                    b.Property<long>("FreelancerPreviousProjectsID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("FreelancerPreviousProjectsID"), 1L, 1);

                    b.Property<long>("FreelancerID")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FreelancerPreviousProjectsID");

                    b.HasIndex("FreelancerID");

                    b.ToTable("FreelancerPreviousProjectsTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Location", b =>
                {
                    b.Property<long>("LocationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("LocationID"), 1L, 1);

                    b.Property<long>("CityID")
                        .HasColumnType("bigint");

                    b.Property<string>("LocationName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LocationID");

                    b.HasIndex("CityID");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.PaymentMode", b =>
                {
                    b.Property<long>("PaymentModeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("PaymentModeID"), 1L, 1);

                    b.Property<string>("PaymentModeName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PaymentModeID");

                    b.ToTable("PaymentModeTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Project", b =>
                {
                    b.Property<long>("ProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectID"), 1L, 1);

                    b.Property<decimal>("Budget")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("CompanyID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("ExpectedCompletionDurationDays")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ProjectDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectPaymentTerms")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ProjectTermsAndConditions")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectID");

                    b.HasIndex("CompanyID");

                    b.ToTable("ProjectTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectApplication", b =>
                {
                    b.Property<long>("ProjectApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectApplicationID"), 1L, 1);

                    b.Property<DateTime>("ApplicationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ApplicationTitle")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("FreelancerID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectApplicationID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectApplicationTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectAssigned", b =>
                {
                    b.Property<long>("ProjectAssignedID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectAssignedID"), 1L, 1);

                    b.Property<DateTime>("AssignDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<string>("Remark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("SelectedApplicationID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectAssignedID");

                    b.HasIndex("ProjectID");

                    b.HasIndex("SelectedApplicationID");

                    b.ToTable("ProjectAssignedTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectDocument", b =>
                {
                    b.Property<long>("ProjectDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectDocumentID"), 1L, 1);

                    b.Property<string>("DocumentFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("DocumentName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectDocumentID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectDocumentTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectStages", b =>
                {
                    b.Property<long>("ProjectStagesID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectStagesID"), 1L, 1);

                    b.Property<decimal>("DurationInHours")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<string>("ProjectStagesName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StepsDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectStagesID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectStagesTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTask", b =>
                {
                    b.Property<long>("ProjectTaskID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskID"), 1L, 1);

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TaskAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("TaskDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskStatus")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskID");

                    b.HasIndex("ProjectID");

                    b.ToTable("ProjectTaskTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskAssignment", b =>
                {
                    b.Property<long>("ProjectTaskAssignmentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskAssignmentID"), 1L, 1);

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("FreelancerID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectTaskID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskAssignmentID");

                    b.HasIndex("FreelancerID");

                    b.HasIndex("ProjectTaskID");

                    b.ToTable("ProjectTaskAssignmentTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskDocument", b =>
                {
                    b.Property<long>("ProjectTaskDocumentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskDocumentID"), 1L, 1);

                    b.Property<string>("ProjectDocumentFilePath")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectTaskID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskDocumentID");

                    b.HasIndex("ProjectTaskID");

                    b.ToTable("ProjectTaskDocumentTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskQuery", b =>
                {
                    b.Property<long>("ProjectTaskQueryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskQueryID"), 1L, 1);

                    b.Property<bool>("IsSolved")
                        .HasColumnType("bit");

                    b.Property<long>("ProjectTaskID")
                        .HasColumnType("bigint");

                    b.Property<string>("QueryDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("QueryTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskQueryID");

                    b.HasIndex("ProjectTaskID");

                    b.ToTable("ProjectTaskQueryTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskQuerySolution", b =>
                {
                    b.Property<long>("ProjectTaskQuerySolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskQuerySolutionID"), 1L, 1);

                    b.Property<long>("ProjectTaskQueryID")
                        .HasColumnType("bigint");

                    b.Property<string>("SolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SolutionTitle")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskQuerySolutionID");

                    b.HasIndex("ProjectTaskQueryID");

                    b.ToTable("ProjectTaskQuerySolutionTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReport", b =>
                {
                    b.Property<long>("ProjectTaskReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportID"), 1L, 1);

                    b.Property<bool>("IsReviewed")
                        .HasColumnType("bit");

                    b.Property<long>("ProjectTaskAssignmentID")
                        .HasColumnType("bigint");

                    b.Property<long>("ProjectTaskID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportID");

                    b.HasIndex("ProjectTaskAssignmentID");

                    b.HasIndex("ProjectTaskID");

                    b.ToTable("ProjectTaskReportTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportConflict", b =>
                {
                    b.Property<long>("ProjectTaskReportConflictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportConflictID"), 1L, 1);

                    b.Property<DateTime>("ConflictDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ConflictRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("ProjectTaskReportID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportConflictID");

                    b.HasIndex("ProjectTaskReportID");

                    b.ToTable("ProjectTaskReportConflictTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportConflictSolution", b =>
                {
                    b.Property<long>("ProjectTaskReportConflictSolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportConflictSolutionID"), 1L, 1);

                    b.Property<long>("ProjectTaskReportConflictID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskReportConflictSolutionID");

                    b.HasIndex("ProjectTaskReportConflictID");

                    b.ToTable("ProjectTaskReportConflictSolutionTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportPaymentConflictSolution", b =>
                {
                    b.Property<long>("ProjectTaskReportPaymentConflictSolutionID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportPaymentConflictSolutionID"), 1L, 1);

                    b.Property<long>("ProjectTaskReportPaymentConflictID")
                        .HasColumnType("bigint");

                    b.Property<long?>("ProjectTaskReportReleasePaymentConflictID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("SolutionDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ProjectTaskReportPaymentConflictSolutionID");

                    b.HasIndex("ProjectTaskReportReleasePaymentConflictID");

                    b.ToTable("ProjectTaskReportPaymentConflictSolutionTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportReleasePayment", b =>
                {
                    b.Property<long>("ProjectTaskReportReleasePaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportReleasePaymentID"), 1L, 1);

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProjectTaskReportID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportReleasePaymentID");

                    b.HasIndex("ProjectTaskReportID");

                    b.ToTable("ProjectTaskReportReleasePaymentTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportReleasePaymentConflict", b =>
                {
                    b.Property<long>("ProjectTaskReportReleasePaymentConflictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("ProjectTaskReportReleasePaymentConflictID"), 1L, 1);

                    b.Property<decimal>("PaymentAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<long>("ProjectTaskReportID")
                        .HasColumnType("bigint");

                    b.HasKey("ProjectTaskReportReleasePaymentConflictID");

                    b.HasIndex("ProjectTaskReportID");

                    b.ToTable("ProjectTaskReportReleasePaymentConflictTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.SelectedApplication", b =>
                {
                    b.Property<long>("SelectedApplicationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SelectedApplicationID"), 1L, 1);

                    b.Property<string>("AnyRemark")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("NeedStartDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProjectApplicationID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("SelectionDate")
                        .HasColumnType("datetime2");

                    b.HasKey("SelectedApplicationID");

                    b.HasIndex("ProjectApplicationID");

                    b.ToTable("SelectedApplicationTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Skill", b =>
                {
                    b.Property<long>("SkillID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillID"), 1L, 1);

                    b.Property<long>("SkillCategoryID")
                        .HasColumnType("bigint");

                    b.Property<string>("SkillName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillID");

                    b.HasIndex("SkillCategoryID");

                    b.ToTable("SkillTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.SkillCategory", b =>
                {
                    b.Property<long>("SkillCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("SkillCategoryID"), 1L, 1);

                    b.Property<string>("SkillCategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SkillCategoryID");

                    b.ToTable("SkillCategoryTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.State", b =>
                {
                    b.Property<long>("StateID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("StateID"), 1L, 1);

                    b.Property<long>("CountryID")
                        .HasColumnType("bigint");

                    b.Property<string>("StateName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("StateID");

                    b.HasIndex("CountryID");

                    b.ToTable("StateTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Technologies", b =>
                {
                    b.Property<long>("TechnologyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TechnologyID"), 1L, 1);

                    b.Property<string>("TechnologyName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TechnologyID");

                    b.ToTable("TechnologyTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.TerminatedProject", b =>
                {
                    b.Property<long>("TerminatedProjectID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TerminatedProjectID"), 1L, 1);

                    b.Property<long>("ProjectID")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("TerminationDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TerminationRemark")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TerminatedProjectID");

                    b.HasIndex("ProjectID");

                    b.ToTable("TerminatedProjectTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.TermsAndConditionForCompany", b =>
                {
                    b.Property<long>("TermsAndConditionRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TermsAndConditionRuleID"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("CompanyRule")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermsAndConditionRuleID");

                    b.ToTable("TermsAndConditonForCompanyTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.TermsAndConditionForFreelancer", b =>
                {
                    b.Property<long>("TermsAndConditionRuleID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("TermsAndConditionRuleID"), 1L, 1);

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("FreelancerRule")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("TermsAndConditionRuleID");

                    b.ToTable("TermsAndConditonForFreelancerTbl");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.City", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.State", "State")
                        .WithMany("Cities")
                        .HasForeignKey("StateID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("State");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Company", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.City", "City")
                        .WithMany("Companies")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FinishedProject", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("FinishedProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerCertifications", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerCertifications")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerEducation", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Education", "Education")
                        .WithMany("FreelancerEducations")
                        .HasForeignKey("EducationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EDeskOutSourcing.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerEducations")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Education");

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerExperience", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerExperiences")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.FreelancerPreviousProject", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Freelancer", "Freelancer")
                        .WithMany("FreelancerPreviousProjects")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Location", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.City", "City")
                        .WithMany("Locations")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Project", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Company", "Company")
                        .WithMany("Projects")
                        .HasForeignKey("CompanyID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Company");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectApplication", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Freelancer", "Freelancer")
                        .WithMany("ProjectApplications")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("ProjectApplications")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectAssigned", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("ProjectAssigneds")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EDeskOutSourcing.Models.SelectedApplication", "SelectedApplication")
                        .WithMany("ProjectAssigneds")
                        .HasForeignKey("SelectedApplicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");

                    b.Navigation("SelectedApplication");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectDocument", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("ProjectDocuments")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectStages", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("ProjectStages")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTask", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("ProjectTasks")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskAssignment", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Freelancer", "Freelancer")
                        .WithMany("ProjectTaskAssignments")
                        .HasForeignKey("FreelancerID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EDeskOutSourcing.Models.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskAssignments")
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Freelancer");

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskDocument", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskDocuments")
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskQuery", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskQueries")
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTask");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskQuerySolution", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskQuery", "ProjectTaskQuery")
                        .WithMany("ProjectTaskQuerySolutions")
                        .HasForeignKey("ProjectTaskQueryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskQuery");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReport", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskAssignment", "ProjectTaskAssignment")
                        .WithMany("ProjectTaskReports")
                        .HasForeignKey("ProjectTaskAssignmentID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EDeskOutSourcing.Models.ProjectTask", "ProjectTask")
                        .WithMany("ProjectTaskReports")
                        .HasForeignKey("ProjectTaskID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTask");

                    b.Navigation("ProjectTaskAssignment");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportConflict", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskReport", "ProjectTaskReport")
                        .WithMany("ProjectTaskReportConflicts")
                        .HasForeignKey("ProjectTaskReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReport");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportConflictSolution", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskReportConflict", "ProjectTaskReportConflict")
                        .WithMany("ProjectTaskReportConflictSolutions")
                        .HasForeignKey("ProjectTaskReportConflictID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReportConflict");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportPaymentConflictSolution", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskReportReleasePaymentConflict", "ProjectTaskReportReleasePaymentConflict")
                        .WithMany("ProjectTaskReportPaymentConflictSolutions")
                        .HasForeignKey("ProjectTaskReportReleasePaymentConflictID")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("ProjectTaskReportReleasePaymentConflict");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportReleasePayment", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskReport", "ProjectTaskReport")
                        .WithMany("ProjectTaskReportReleasePayments")
                        .HasForeignKey("ProjectTaskReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReport");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportReleasePaymentConflict", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectTaskReport", "ProjectTaskReport")
                        .WithMany("ProjectTaskReportReleasePaymentConflicts")
                        .HasForeignKey("ProjectTaskReportID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectTaskReport");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.SelectedApplication", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.ProjectApplication", "ProjectApplication")
                        .WithMany("SelectedApplications")
                        .HasForeignKey("ProjectApplicationID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("ProjectApplication");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Skill", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.SkillCategory", "SkillCategory")
                        .WithMany("Skills")
                        .HasForeignKey("SkillCategoryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("SkillCategory");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.State", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Country", "Country")
                        .WithMany("States")
                        .HasForeignKey("CountryID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Country");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.TerminatedProject", b =>
                {
                    b.HasOne("EDeskOutSourcing.Models.Project", "Project")
                        .WithMany("TerminatedProjects")
                        .HasForeignKey("ProjectID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Project");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.City", b =>
                {
                    b.Navigation("Companies");

                    b.Navigation("Locations");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Company", b =>
                {
                    b.Navigation("Projects");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Country", b =>
                {
                    b.Navigation("States");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Education", b =>
                {
                    b.Navigation("FreelancerEducations");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Freelancer", b =>
                {
                    b.Navigation("FreelancerCertifications");

                    b.Navigation("FreelancerEducations");

                    b.Navigation("FreelancerExperiences");

                    b.Navigation("FreelancerPreviousProjects");

                    b.Navigation("ProjectApplications");

                    b.Navigation("ProjectTaskAssignments");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.Project", b =>
                {
                    b.Navigation("FinishedProjects");

                    b.Navigation("ProjectApplications");

                    b.Navigation("ProjectAssigneds");

                    b.Navigation("ProjectDocuments");

                    b.Navigation("ProjectStages");

                    b.Navigation("ProjectTasks");

                    b.Navigation("TerminatedProjects");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectApplication", b =>
                {
                    b.Navigation("SelectedApplications");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTask", b =>
                {
                    b.Navigation("ProjectTaskAssignments");

                    b.Navigation("ProjectTaskDocuments");

                    b.Navigation("ProjectTaskQueries");

                    b.Navigation("ProjectTaskReports");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskAssignment", b =>
                {
                    b.Navigation("ProjectTaskReports");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskQuery", b =>
                {
                    b.Navigation("ProjectTaskQuerySolutions");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReport", b =>
                {
                    b.Navigation("ProjectTaskReportConflicts");

                    b.Navigation("ProjectTaskReportReleasePaymentConflicts");

                    b.Navigation("ProjectTaskReportReleasePayments");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportConflict", b =>
                {
                    b.Navigation("ProjectTaskReportConflictSolutions");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.ProjectTaskReportReleasePaymentConflict", b =>
                {
                    b.Navigation("ProjectTaskReportPaymentConflictSolutions");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.SelectedApplication", b =>
                {
                    b.Navigation("ProjectAssigneds");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.SkillCategory", b =>
                {
                    b.Navigation("Skills");
                });

            modelBuilder.Entity("EDeskOutSourcing.Models.State", b =>
                {
                    b.Navigation("Cities");
                });
#pragma warning restore 612, 618
        }
    }
}
